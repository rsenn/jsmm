// <jsmm> -*- C++ -*- 

// C++ wrapper for the SpiderMonkey JavaScript engine.
// Copyright (C) 2006  Roman Senn <r.senn@nexbyte.com>
//    
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA

#ifndef jsmm_callback_H
#define jsmm_callback_H

#include <jsmm/pointer>
#include <jsmm/types>
#include <jsmm/value>
#include <jsmm/objectapi>

#include <stdarg.h>

jsmm_namespace_BEGIN

/** Forward declarations. */
/*@{*/
struct ObjectMap;
struct ObjectOps;
struct Principals;
struct XDRState;
/*@}*/

/**
 * Call Runtime::mapGCRoots to map the GC's roots table using 
 * GCRootMapFun(rp, name, data).
 * 
 * The root is pointed at by rp; if the root is unnamed, name is null; data
 * is supplied from the second parameter to mapGCRoots.
 *
 * The map function should return MAP_GCROOT_REMOVE to cause the currently
 * enumerated root to be removed. To stop enumeration, set MAP_GCROOT_STOP
 * in the return value. To keep on mapping, return MAP_GCROOT_NEXT. These
 * constants are flags; you can OR them together.
 *
 * This function acquires and releases rt's GC lock around the mapping of the
 * roots table, so the map function should run to completion in as few cycles
 * as possible. Of course, map cannot call Context::garbageCollect,
 * Context::maybeGarbageCollect, Context::beginRequiest or or any JS API
 * entry point that acquires locks, without double-tripping or deadlocking
 * on the GC lock.
 */
typedef Uint GCRootMapFun(void *rp, const char *name, void *data);

/**
 * Add, delete, get or set a property named by id in obj.
 * 
 * Note the Value id type - id may be a string (Unicode property identifier)
 * or an int (element index). The *vp out parameter, on success, is the new 
 * property value after an add, get, or set. After a successful delete, *vp 
 * is false if obj[id] can't be deleted (because it's permanent).
 */
typedef Bool PropertyOp(ContextRef cx, ObjectAPI obj, Value id,
                        Value &vref);

/**
 * This function type is used for callbacks that enumerate the properties of
 * an Object. 
 *
 * The behavior depends on the value of enum_op:
 *
 *  ENUMERATE_INIT
 *    A new, opaque iterator state should be allocated and stored in *statep.
 *    (You can use PRIVATE_TO_JSVAL() to tag the pointer to be stored).
 *
 *    The number of properties that will be enumerated should be returned as
 *    an integer jsval in *idp, if idp is non-null, and provided the number
 *    of enumerable properties is known. If idp is non-null and the number of
 *    enumerable properties can't be computed in advance, *idp should be set
 *    to JSVAL_ZERO.
 *
 *  ENUMERATE_NEXT
 *    A previously allocated opaque iterator state is passed in via statep.
 *    Return the next jsid in the iteration using *idp.  The opaque iterator
 *    state pointed at by statep is destroyed and *statep is set to 
 *    JSVAL_NULL if there are no properties left to enumerate.
 *
 *  ENUMERATE_DESTROY
 *    Destroy the opaque iterator state previously allocated in *statep by a
 *    call to this function when enum_op was JSENUMERATE_INIT.
 *
 * The return value is used to indicate success, with a value of JS_FALSE
 * indicating failure.
 */
typedef Bool NewEnumerateOp(ContextRef cx, ObjectAPI obj, 
                            IterateOp enum_op, Value &stateref, Id &idref);

/**
 * The old-style Class.enumerate op should define all lazy properties not
 * yet reflected in obj.
 */
typedef Bool EnumerateOp(ContextRef cx, ObjectAPI obj);

/**
 * Resolve a lazy property named by id in obj by defining it directly in obj.
 * Lazy properties are those reflected from some peer native property space
 * (e.g., the DOM attributes for a given node reflected as obj) on demand.
 *
 * JS looks for a property in an object, and if not found, tries to resolve
 * the given id. If resolve succeeds, the engine looks again in case resolve
 * defined obj[id]. If no such property exists directly in obj, the process
 * is repeated with obj's prototype, etc.
 *
 * NB: NewResolveOp provides a cheaper way to resolve lazy properties.
 */
typedef Bool ResolveOp(ContextRef cx, ObjectAPI obj, Value id);

/**
 * Like ResolveOp, but flags provide contextual information as follows:
 *
 *  RESOLVE_QUALIFIED   a qualified property id: obj.id or obj[id], not id
 *  RESOLVE_ASSIGNING   obj[id] is on the left-hand side of an assignment
 *  RESOLVE_DETECTING   'if (o.p)...' or similar detection opcode sequence
 *  RESOLVE_DECLARING   var, const, or function prolog declaration opcode
 *  RESOLVE_CLASSNAME   class name used when constructing
 *
 * The *objp out parameter, on success, should be null to indicate that id
 * was not resolved; and non-null, referring to obj or one of its prototypes,
 * if id was resolved.
 *
 * This hook instead of ResolveOp is called via the Class.resolve member
 * if CLASS_NEW_RESOLVE is set in Class.flags.
 *
 * Setting CLASS_NEW_RESOLVE and CLASS_NEW_RESOLVE_GETS_START further
 * extends this hook by passing in the starting object on the prototype chain
 * via *objp.  Thus a resolve hook implementation may define the property id
 * being resolved in the object in which the id was first sought, rather than
 * in a prototype object whose class led to the resolve hook being called.
 *
 * When using CLASS_NEW_RESOLVE_GETS_START, the resolve hook must therefore
 * null *objp to signify "not resolved". With only CLASS_NEW_RESOLVE and no
 * CLASS_NEW_RESOLVE_GETS_START, the hook can assume *objp is null on entry.
 * This is not good practice, but enough existing hook implementations count
 * on it that we can't break compatibility by passing the starting object in
 * *objp without a new Class flag.
 */  
typedef Bool NewResolveOp(ContextRef cx, ObjectAPI obj, Value id,
                          Uint flags, ObjectPtr &objref);  
/**
 * Convert obj to the given type, returning true with the resulting value in
 * *vp on success, and returning false on error or exception.
 */
typedef Bool ConvertOp(ContextRef cx, ObjectAPI obj, Type type,
                       Value &vref);  
/**
 * Finalize obj, which the garbage collector has determined to be unreachable
 * from other live objects or from GC roots.  Obviously, finalizers must never
 * store a reference to obj.
 */
typedef void FinalizeOp(ContextRef cx, ObjectAPI obj);

/**
 * Used by Engine::addExternalStringFinalizer and
 * Engine::removeExternalStringFinalizer to extend and reduce 
 * the set of string types finalized by the GC.
 */
typedef void StringFinalizeOp(ContextRef cx, StringRef str);

typedef ObjectOps *GetObjectOps(ContextRef cx, ClassRef cls);

typedef Bool CheckAccessOp(ContextRef cx, ObjectAPI obj, Value id,
                           AccessMode mode, Value &vref);

// TODO: CheckAccessOp
// 

/**
 * Encode or decode an object, given an XDR state record representing
 * external data.  See jsxdrapi.h.
 */
typedef Bool XDRObjectOp(XDRState &xdr, ObjectPtr &objref);

/**
 * Check whether v is an instance of obj. Return false on error or exception,
 * true on success with JS_TRUE in *bref if v is an instance of obj, JS_FALSE 
 * in &bref otherwise.
 */
typedef Bool HasInstanceOp(ContextRef cx, ObjectAPI obj, 
                           Value v, Bool &bref);
/**
 * Function type for JSClass.mark and JSObjectOps.mark, called from the GC to
 * scan live GC-things reachable from obj's private data structure.  For each
 * such thing, a mark implementation must call
 *
 *    JS_MarkGCThing(cx, thing, name, arg);
 *
 * The trailing name and arg parameters are used for GC_MARK_DEBUG-mode heap
 * dumping and ref-path tracing.  The mark function should pass a (typically
 * literal) string naming the private data member for name, and it must pass
 * the opaque arg parameter through from its caller.
 *
 * For the JSObjectOps.mark hook, the return value is the number of slots at
 * obj->slots to scan.  For JSClass.mark, the return value is ignored.
 *
 * NB: JSMarkOp implementations cannot allocate new GC-things (JS_NewObject
 * called from a mark function will fail silently, e.g.).
 */
typedef Uint MarkOp(ContextRef cx, ObjectAPI obj, void *arg);

/**
 * The optional JSClass.reserveSlots hook allows a class to make computed
 * per-instance object slots reservations, in addition to or instead of using
 * JSCLASS_HAS_RESERVED_SLOTS(n) in the JSClass.flags initializer to reserve
 * a constant-per-class number of slots.  APIementations of this hook should
 * return the number of slots to reserve, not including any reserved by using
 * JSCLASS_HAS_RESERVED_SLOTS(n) in JSClass.flags.
 *
 * NB: called with obj locked by the JSObjectOps-specific mutual exclusion
 * mechanism appropriate for obj, so don't nest other operations that might
 * also lock obj.
 */
typedef Uint ReserveSlotsOp(ContextRef cx, ObjectAPI obj);

/**
 * Create a new subclass of ObjectMap (see jsobj.h), with the nrefs and ops
 * members initialized from the same-named parameters, and with the nslots
 * and freeslot members initialized according to ops and clasp. Return null 
 * on error, non-null on success.
 *
 * ObjectMaps are reference-counted by generic code in the engine. Usually,
 * the nrefs parameter to ObjectOps.newObjectMap will be 1, to count the
 * ref returned to the caller on success.  After a successful construction,
 * some number of js_HoldObjectMap and js_DropObjectMap calls ensue. When
 * nrefs reaches 0 due to a js_DropObjectMap call, 
 * ObjectOps.destroyObjectMap will be called to dispose of the map.
 */
typedef ObjectMap *NewObjectMapOp(ContextRef cx, RefCount nrefs,
                                  ObjectOps *ops, ClassPtr cls, 
                                  ObjectPtr obj);


/**
 * Generic type for an infallible ObjectMap operation, used currently by
 * ObjectOps.destroyObjectMap.
 */
typedef void ObjectMapOp(ContextRef cx, ObjectMap *map);

 /**
  * Look for id in obj and its prototype chain, returning false on error or
  * exception, true on success.  On success, return null in *propp if id was
  * not found.  If id was found, return the first object searching from obj
  * along its prototype chain in which id names a direct property in *objp, and
  *  return a non-null, opaque property pointer in *propp.
  *
  * If LookupPropOp succeeds and returns with *propp non-null, that pointer
  * may be passed as the prop parameter to a AttributesOp, as a short-cut
  * that bypasses id re-lookup.  In any case, a non-null *propp result after a
  * successful lookup must be dropped via ObjectOps.dropProperty.
  *
  * NB: successful return with non-null *propp means the implementation may
  * have locked *objp and added a reference count associated with *propp, so
  * callers should not risk deadlock by nesting or interleaving other lookups
  * or any obj-bearing ops before dropping *propp.
  */
 typedef Bool LookupPropOp(ContextRef cx, ObjectAPI obj, Id id, 
                           ObjectPtr *objp, Property **propp);


 /**
  * Define obj[id], a direct property of obj named id, having the given
  * initial value, with the specified getter, setter, and attributes.
  * If the propp out param is non-null, *propp on successful return contains
  * an opaque property pointer usable as a speedup hint with AttributesOp.
  * But note that propp may be null, indicating that the caller is not 
  * interested in recovering an opaque pointer to the newly-defined property.
  *
  * If propp is non-null and DefinePropOp succeeds, its caller must be sure
  * to drop *propp using ObjectOps.dropProperty in short order, just as with
  * LookupPropOp.
  */
 typedef Bool DefinePropOp(ContextRef cx, ObjectAPI obj, Id id, Value value,
                           PropertyOp *getter, PropertyOp *setter, 
                           Uint attrs, Property **propp);

/**
 * Get, set, or delete obj[id], returning false on error or exception, true
 * on success.  If getting or setting, the new value is returned in *vp on
 * success.  If deleting without error, *vp will be false if obj[id] is
 * permanent, and false if id named a direct property of obj that was in
 * fact deleted, or if id names no direct property of obj (id could name a
 * prototype property, or no property in obj or its prototype chain).
 */
typedef Bool PropertyIdOp(ContextRef cx, ObjectAPI obj, Id id,
                          Value &vref);

/**
 * Get or set attributes of the property obj[id].  Return false on error or
 * exception, true with current attributes in *attrsp.  If prop is non-null,
 * it must come from the *propp out parameter of a prior DefinePropOp or
 * LookupPropOp call.
 */
typedef Bool AttributesOp(ContextRef cx, ObjectAPI obj, Id id,
                          Property *prop, Uint *attrsp);

/**
 * ObjectOps.checkAccess type: check whether obj[id] may be accessed per
 * mode, returning false on error/exception, true on success with obj[id]'s
 * last-got value in *vp, and its attributes in *attrsp.
 */
typedef Bool CheckAccessIdOp(ContextRef cx, ObjectAPI obj, Id id,
                             AccessMode mode, Value &vref, Uint &attrsref);

/**
 * A generic type for functions mapping an object to another object, or null
 * if an error or exception was thrown on cx. Used by ObjectOps.thisObject
 * at present.
 */
typedef ObjectPtr ObjectOp(ContextRef cx, ObjectAPI obj);

/**
 * A generic type for functions taking a context, object, and property, with
 * no return value.  Used by JSObjectOps.dropProperty currently (see above,
 * JSDefinePropOp and JSLookupPropOp, for the object-locking protocol in which
 * dropProperty participates).
 */
typedef void PropertyRefOp(ContextRef cx, ObjectAPI obj,
                           Property *prop);

/**
 * Function type for ObjectOps.setProto and ObjectOps.setParent. These
 * hooks must check for cycles without deadlocking, and otherwise take 
 * special steps. See jsobj.c, js_SetProtoOrParent, for an example.
 */
typedef Bool SetObjectSlotOp(ContextRef cx, ObjectAPI obj,
                             Uint slot, ObjectPtr pobj);

/**
 * Get and set a required slot, one that should already have been allocated.
 * These operations are infallible, so required slots must be pre-allocated,
 * or implementations must suppress out-of-memory errors.  The native ops
 * (js_ObjectOps, see jsobj.c) access slots reserved by including a call to
 * the JSCLASS_HAS_RESERVED_SLOTS(n) macro in the JSClass.flags initializer.
 *
 * NB: the slot parameter is a zero-based index into obj->slots[], unlike the
 * index parameter to the JS_GetReservedSlot and JS_SetReservedSlot API entry
 * points, which is a zero-based index into the JSCLASS_RESERVED_SLOTS(clasp)
 * reserved slots that come after the initial well-known slots: proto, 
 * parent, class, and optionally, the private data slot.
 */

/*@{*/
typedef Value GetRequiredSlotOp(ContextRef cx, ObjectAPI obj,
                                Uint slot);

typedef Bool SetRequiredSlotOp(ContextRef cx, ObjectAPI obj,
                               Uint slot, Value v);
/*@}*/

// TODO: GetMethodOp
// TODO: SetMethodOp
// TODO: EnumerateValuesOp
 
/** Object specific equality check against a Value */
typedef Bool EqualityOp(ContextRef cx, ObjectAPI obj,
                        Value v, Bool &bref);

/** Object specific Value concatenation */
typedef Bool ConcatenateOp(ContextRef cx, ObjectAPI obj,
                           Value v, Value &vref);

/** Typedef for native functions called by the JS VM. */
typedef Bool Native(ContextRef cx, ObjectPtr obj, Uint argc,
                    Value argv[], Value &rval);

typedef Bool Construct(ContextRef cx, ObjectAPI obj, Uint argc,
                       Value argv[], Value &rval);

typedef Bool GCCallback(ContextRef cx, GCStatus status);
// TODO: GCCallback
 
/** Called everytime a Script branches */
typedef Bool BranchCallback(ContextRef cx, ScriptPtr script);

/** Reports script parsing/execution errors */
/*  typedef void ErrorReporter(ContextRef cx, const char *message,
                           ErrorReport report);*/

struct ErrorFormatString
{
  const char *format;
  Uint argCount;
};

typedef const ErrorFormatString *ErrorCallback(void *userRef, 
                                               const char *locale,
                                               const Uint errorNumber);

// TODO: ErrorFormatString/ErrorCallback

/** Format arguments and put them into a Value array */
typedef Bool ArgumentFormatter(ContextRef cx, const char *format,
                               Bool fromJS, Value *&vpref, va_list *app);
// TODO: LocaleToUpperCase
typedef Bool LocaleToUpperCase(ContextRef cx, StringPtr src, Value &rval);
    
typedef Bool LocaleToLowerCase(ContextRef cx, StringPtr src, Value &rval);

typedef Bool LocaleCompare(ContextRef cx, StringPtr src1, StringPtr src2,
                           Value &rval);

// TODO: LocaleToLowerCase
// TODO: LocaleCompare

/** Convert text from a locale charset to a String value */ 
typedef Bool LocaleToUnicode(ContextRef cx, char *src, Value &rval);

/**
 * XDR-encode or -decode a principals instance, based on whether xdr->mode is
 * XDR_ENCODE, in which case *principalsp should be encoded; or
 * XDR_DECODE, in which case implementations must return a held
 * (via PRINCIPALS_HOLD), non-null *principalsp out parameter.
 * Return true on success, false on any error, which the implementation 
 * must have reported.
 */
typedef Bool PrincipalsTranscoder(XDRState *xdr, Principals **principalsp);
 
/**
 * Return a weak reference to the principals associated with obj, possibly
 * via the immutable parent chain leading from obj to a top-level container
 * (e.g., a window object in the DOM level 0). If there are no principals
 * associated with obj, return null.  Therefore null does not mean an error
 * was reported; in no event should an error be reported or an exception be
 * thrown by this callback's implementation.
 */
typedef Principals *ObjectPrincipalsFinder(ContextRef cx, ObjectAPI obj);

/** Generic operation on a principal */
typedef void PrincipalOp(ContextRef cx, Principals *pcp);

/** Get a pointer from principal */
typedef void *PrincipalGetOp(ContextRef cx, Principals *pcp);

/** Check something in principal and return Bool. */
typedef Bool PrincipalCheckOp(ContextRef cx, Principals *pcp);

/** Principal comparision op */
typedef Bool PrincipalCmpOp(Principals *pcp1, Principals *pcp2);

jsmm_namespace_END

#endif /* jsmm_callback_H */
