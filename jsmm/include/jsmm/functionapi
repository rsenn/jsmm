// <jsmm> -*- C++ -*-

// C++ wrapper for the SpiderMonkey JavaScript engine.
// Copyright (C) 2006  Roman Senn <r.senn@nexbyte.com>
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA

#ifndef jsmm_functionapi_H
#define jsmm_functionapi_H

#include <jsmm/reference>
#include <jsmm/types>
#include <jsmm/value>
#include <jsmm/callback>

jsmm_namespace_BEGIN

class Function;
class FunctionObjectAPI;

/**
 * Class that wraps JSFunction, a JavaScript function.
 * This is the simple version which should not be instantiated 
 * using the 'new' operator.
 * Because it has only one member, it has the size of a word and
 * can be typecast from/to a JSFunction pointer.
 */
struct FunctionAPI : public FunctionRef
{
/*  typedef Bool Native
   (ContextRef cx, ObjectPtr obj, Uint argc, Value argv[], Value &rval);*/

public:
  FunctionAPI
    (FunctionPtr ptr);

  FunctionAPI
    (FunctionRef ref);

  const char *getName
    () const;

  FunctionFlags getFlags
    () const;

  ObjectPtr getObject
    () const;

  Function *getInstance
    (ContextRef cx) const;

  void *getVTable
    (ContextRef cx) const;

  ObjectPtr cloneObject
    (ContextRef cx, ObjectPtr parent) const;
  
  Bool isNative
    () const;
  
  StringPtr decompile
    (ContextRef cx, Uint indent) const;

  StringPtr decompileBody
    (ContextRef cx, Uint indent) const;

  Bool call
    (ContextRef cx, ObjectPtr obj, Uint argc, Value argv[], Value &rval) 
    const;
  
  static Bool call
    (ContextRef cx, ObjectPtr obj, const char *name, Uint argc, Value argv[],
     Value &rval);
  
  static Bool call
    (ContextRef cx, ObjectPtr obj, const Value &val, Uint argc, Value argv[],
     Value &rval);
  
  static FunctionPtr create
    (ContextRef cx, Native &fn, Uint args, FunctionFlags flags, 
     ObjectPtr parent = 0, const char *name = 0);

protected:
  FunctionAPI
    ();
};  

jsmm_namespace_END

#endif /* jsmm_functionapi_H */
