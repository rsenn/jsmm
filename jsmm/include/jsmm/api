// <jsmm> -*- C++ -*- 

// C++ wrapper for the SpiderMonkey JavaScript engine.
// Copyright (C) 2006  Roman Senn <r.senn@nexbyte.com>
//    
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA

#ifndef jsmm_api_H
#define jsmm_api_H

#include <jsmm/pointer>
#include <jsmm/types>
#include <jsmm/value>
#include <jsmm/callback>
#include <jsmm/structs>

#include <stdarg.h>

jsmm_namespace_BEGIN

Int64 Now();
Value GetNaNValue(ContextPtr cx);
Value GetNegativeInfinityValue(ContextPtr cx);  
Value GetPositiveInfinityValue(ContextPtr cx);
Value GetEmptyStringValue(ContextPtr cx);
Bool ConvertArguments(ContextPtr cx, Uint argc, Value argv[], const Byte *format, ...);
Bool ConvertArgumentsVA(ContextPtr cx, Uint argc, Value argv[], const Byte *format, va_list ap);
Value *PushArguments(ContextPtr cx, void **markp, const Byte *format, ...);
Value *PushArgumentsVA(ContextPtr cx, void **markp, const Byte *format, va_list ap);
void PopArguments(ContextPtr cx, void *mark);
Bool AddArgumentFormatter(ContextPtr cx, const Byte *format, ArgumentFormatter &formatter);
void RemoveArgumentFormatter(ContextPtr cx, const Byte *format);
Bool ConvertValue(ContextPtr cx, Value v, Type type, Value &v);
Bool ValueToObject(ContextPtr cx, Value v, ObjectPtr &objp);
FunctionPtr ValueToFunction(ContextPtr cx, Value v);
FunctionPtr ValueToConstructor(ContextPtr cx, Value v);
StringPtr ValueToString(ContextPtr cx, Value v);
Bool ValueToNumber(ContextPtr cx, Value v, Double &dp);
Bool ValueToECMAInt32(ContextPtr cx, Value v, Int32 &ip);
Bool ValueToECMAUint32(ContextPtr cx, Value v, Uint32 &ip);
Bool ValueToInt32(ContextPtr cx, Value v, Int32 &ip);
Bool ValueToUint16(ContextPtr cx, Value v, Uint16 &ip);
Bool ValueToBool(ContextPtr cx, Value v, Bool &bp);
Type TypeOfValue(ContextPtr cx, Value v);
const Byte *GetTypeName(ContextPtr cx, Type type);
RuntimePtr NewRuntime(Uint32 maxbytes);
void DestroyRuntime(RuntimePtr rt);
void ShutDown(void);
void *GetRuntimePrivate(RuntimePtr rt);
void SetRuntimePrivate(RuntimePtr rt, void *data);
void BeginRequest(ContextPtr cx);
void EndRequest(ContextPtr cx);
void YieldRequest(ContextPtr cx);
RefCount SuspendRequest(ContextPtr cx);
void ResumeRequest(ContextPtr cx, RefCount saveDepth);
void Lock(RuntimePtr rt);
void Unlock(RuntimePtr rt);
ContextPtr NewContext(RuntimePtr rt, Size stackChunkSize);
void DestroyContext(ContextPtr cx);
void DestroyContextNoGC(ContextPtr cx);
void DestroyContextMaybeGC(ContextPtr cx);
void *GetContextPrivate(ContextPtr cx);
void SetContextPrivate(ContextPtr cx, void *data);
RuntimePtr GetRuntime(ContextPtr cx);
ContextPtr ContextIterator(RuntimePtr rt, ContextPtr &iterp);
Version GetVersion(ContextPtr cx);
Version SetVersion(ContextPtr cx, Version version);
const Byte *VersionToString(Version version);
Version StringToVersion(const Byte *string);
Uint32 GetOptions(ContextPtr cx);
Uint32 SetOptions(ContextPtr cx, Uint32 options);
Uint32 ToggleOptions(ContextPtr cx, Uint32 options);
const Byte *GetImplementationVersion(void);
ObjectPtr GetGlobalObject(ContextPtr cx);
void SetGlobalObject(ContextPtr cx, ObjectPtr obj);
Bool InitStandardClasses(ContextPtr cx, ObjectPtr obj);
Bool ResolveStandardClass(ContextPtr cx, ObjectPtr obj, Value id, Bool *resolved);
Bool EnumerateStandardClasses(ContextPtr cx, ObjectPtr obj);
IdArray &EnumerateResolvedStandardClasses(ContextPtr cx, ObjectPtr obj, IdArray &ida);
ObjectPtr GetScopeChain(ContextPtr cx);
void *malloc(ContextPtr cx, Size nbytes);
void *realloc(ContextPtr cx, void *p, Size nbytes);
void free(ContextPtr cx, void *p);
Byte *strdup(ContextPtr cx, const Byte *s);
Double *NewDouble(ContextPtr cx, Double d);
Bool NewDoubleValue(ContextPtr cx, Double d, Value &rval);
Bool NewNumberValue(ContextPtr cx, Double d, Value &rval);
Bool AddRoot(ContextPtr cx, void *rp);
Bool AddNamedRoot(ContextPtr cx, void *rp, const Byte *name);
Bool AddNamedRootRT(RuntimePtr rt, void *rp, const Byte *name);
Bool RemoveRoot(ContextPtr cx, void *rp);
Bool RemoveRootRT(RuntimePtr rt, void *rp);
void ClearNewbornRoots(ContextPtr cx);
Bool EnterLocalRootScope(ContextPtr cx);
void LeaveLocalRootScope(ContextPtr cx);
void ForgetLocalRoot(ContextPtr cx, void *thing);
void DumpNamedRoots(RuntimePtr rt, void (*dump)(const Byte *name, void *rp, void *data), void *data);
Uint32 MapGCRoots(RuntimePtr rt, GCRootMapFun map, void *data);
Bool LockGCThing(ContextPtr cx, void *thing);
Bool LockGCThingRT(RuntimePtr rt, void *thing);
Bool UnlockGCThing(ContextPtr cx, void *thing);
Bool UnlockGCThingRT(RuntimePtr rt, void *thing);
void MarkGCThing(ContextPtr cx, void *thing, const Byte *name, void *arg);
void GC(ContextPtr cx);
void MaybeGC(ContextPtr cx);
GCCallback *SetGCCallback(ContextPtr cx, GCCallback *cb);
GCCallback *SetGCCallbackRT(RuntimePtr rt, GCCallback *cb);
Bool IsAboutToBeFinalized(ContextPtr cx, void *thing);
/*void SetGCParameter(RuntimePtr rt, GCParamKey key, Uint32 value);*/
Int AddExternalStringFinalizer(StringFinalizeOp finalizer);
Int RemoveExternalStringFinalizer(StringFinalizeOp finalizer);
StringPtr NewExternalString(ContextPtr cx, Char *chars, Size length, Int type);
Int GetExternalStringGCType(RuntimePtr rt, StringPtr str);
void SetThreadStackLimit(ContextPtr cx, Uword limitAddr);
void DestroyIdArray(ContextPtr cx, IdArray &ida);
Bool ValueToId(ContextPtr cx, Value v, Id &idref);
Bool IdToValue(ContextPtr cx, Id id, Value &v);
Bool PropertyStub(ContextPtr cx, ObjectPtr obj, Value id, Value &v);
Bool EnumerateStub(ContextPtr cx, ObjectPtr obj);
Bool ResolveStub(ContextPtr cx, ObjectPtr obj, Value id);
Bool ConvertStub(ContextPtr cx, ObjectPtr obj, Type type, Value &v);
void FinalizeStub(ContextPtr cx, ObjectPtr obj);
ObjectPtr InitClass(ContextPtr cx, ObjectPtr obj, ObjectPtr parent_proto, ClassPtr clasp, Native &constructor, Uint nargs, PropertySpec *ps, FunctionSpec *fs, PropertySpec *static_ps, FunctionSpec *static_fs);
ClassPtr GetClass(ContextPtr cx, ObjectPtr obj);
ClassPtr GetClass(ObjectPtr obj);
Bool InstanceOf(ContextPtr cx, ObjectPtr obj, ClassPtr clasp, Value argv[]);
Bool HasInstance(ContextPtr cx, ObjectPtr obj, Value v, Bool &b);
void *GetPrivate(ContextPtr cx, ObjectPtr obj);
Bool SetPrivate(ContextPtr cx, ObjectPtr obj, void *data);
void *GetInstancePrivate(ContextPtr cx, ObjectPtr obj, ClassPtr clasp, Value argv[]);
ObjectPtr GetPrototype(ContextPtr cx, ObjectPtr obj);
Bool SetPrototype(ContextPtr cx, ObjectPtr obj, ObjectPtr proto);
ObjectPtr GetParent(ContextPtr cx, ObjectPtr obj);
Bool SetParent(ContextPtr cx, ObjectPtr obj, ObjectPtr parent);
ObjectPtr GetConstructor(ContextPtr cx, ObjectPtr proto);
Bool GetObjectId(ContextPtr cx, ObjectPtr obj, Id &idref);
ObjectPtr NewObject(ContextPtr cx, ClassPtr clasp, ObjectPtr proto, ObjectPtr parent);
Bool SealObject(ContextPtr cx, ObjectPtr obj, Bool deep);
ObjectPtr ConstructObject(ContextPtr cx, ClassPtr clasp, ObjectPtr proto, ObjectPtr parent);
ObjectPtr ConstructObjectWithArguments(ContextPtr cx, ClassPtr clasp, ObjectPtr proto, ObjectPtr parent, Uint argc, Value argv[]);
ObjectPtr DefineObject(ContextPtr cx, ObjectPtr obj, const Byte *name, ClassPtr clasp, ObjectPtr proto, Uint attrs);
Bool DefineConstDoubles(ContextPtr cx, ObjectPtr obj, ConstDoubleSpec cds[]);
Bool DefineProperties(ContextPtr cx, ObjectPtr obj, PropertySpec ps[]);
Bool DefineProperty(ContextPtr cx, ObjectPtr obj, const Byte *name, Value value, PropertyOp *getter, PropertyOp *setter, Uint attrs);
Bool GetPropertyAttributes(ContextPtr cx, ObjectPtr obj, const Byte *name, Uint *attrsp, Bool *foundp);
Bool GetPropertyAttrsGetterAndSetter(ContextPtr cx, ObjectPtr obj, const Byte *name, Uint *attrsp, Bool *foundp, PropertyOp *&getterp, PropertyOp *&setterp);
Bool SetPropertyAttributes(ContextPtr cx, ObjectPtr obj, const Byte *name, Uint attrs, Bool *foundp);
Bool DefinePropertyWithTinyId(ContextPtr cx, ObjectPtr obj, const Byte *name, Uint8 tinyid, Value value, PropertyOp *getter, PropertyOp *setter, Uint attrs);
Bool AliasProperty(ContextPtr cx, ObjectPtr obj, const Byte *name, const Byte *alias);
Bool HasProperty(ContextPtr cx, ObjectPtr obj, const Byte *name, Bool *foundp);
Bool LookupProperty(ContextPtr cx, ObjectPtr obj, const Byte *name, Value &v);
Bool LookupPropertyWithFlags(ContextPtr cx, ObjectPtr obj, const Byte *name, Uint flags, Value &v);
Bool GetProperty(ContextPtr cx, ObjectPtr obj, const Byte *name, Value &v);
Bool GetMethod(ContextPtr cx, ObjectPtr obj, const Byte *name, ObjectPtr *objp, Value &v);
Bool SetProperty(ContextPtr cx, ObjectPtr obj, const Byte *name, Value &v);
Bool DeleteProperty(ContextPtr cx, ObjectPtr obj, const Byte *name);
Bool DeleteProperty2(ContextPtr cx, ObjectPtr obj, const Byte *name, Value &rval);
Bool DefineUCProperty(ContextPtr cx, ObjectPtr obj, const Char *name, Size namelen, Value value, PropertyOp *getter, PropertyOp *setter, Uint attrs);
Bool GetUCPropertyAttributes(ContextPtr cx, ObjectPtr obj, const Char *name, Size namelen, Uint *attrsp, Bool *foundp);
Bool GetUCPropertyAttrsGetterAndSetter(ContextPtr cx, ObjectPtr obj, const Char *name, Size namelen, Uint &attrs, Bool &found, PropertyOp *&getterp, PropertyOp *&setterp);
Bool SetUCPropertyAttributes(ContextPtr cx, ObjectPtr obj, const Char *name, Size namelen, Uint attrs, Bool &found);
Bool DefineUCPropertyWithTinyId(ContextPtr cx, ObjectPtr obj, const Char *name, Size namelen, Int8 tinyid, Value value, PropertyOp *getter, PropertyOp *setter, Uint attrs);
Bool HasUCProperty(ContextPtr cx, ObjectPtr obj, const Char *name, Size namelen, Bool *vp);
Bool LookupUCProperty(ContextPtr cx, ObjectPtr obj, const Char *name, Size namelen, Value &v);
Bool GetUCProperty(ContextPtr cx, ObjectPtr obj, const Char *name, Size namelen, Value &v);
Bool SetUCProperty(ContextPtr cx, ObjectPtr obj, const Char *name, Size namelen, Value &v);
Bool DeleteUCProperty2(ContextPtr cx, ObjectPtr obj, const Char *name, Size namelen, Value &rval);
ObjectPtr NewArrayObject(ContextPtr cx, Int length, Value *vector);
Bool IsArrayObject(ContextPtr cx, ObjectPtr obj);
Bool GetArrayLength(ContextPtr cx, ObjectPtr obj, Uint &length);
Bool SetArrayLength(ContextPtr cx, ObjectPtr obj, Uint length);
Bool HasArrayLength(ContextPtr cx, ObjectPtr obj, Uint &length);
Bool DefineElement(ContextPtr cx, ObjectPtr obj, Int index, Value value, PropertyOp *getter, PropertyOp *setter, Uint attrs);
Bool AliasElement(ContextPtr cx, ObjectPtr obj, const Byte *name, Int alias);
Bool HasElement(ContextPtr cx, ObjectPtr obj, Int index, Bool *foundp);
Bool LookupElement(ContextPtr cx, ObjectPtr obj, Int index, Value &v);
Bool GetElement(ContextPtr cx, ObjectPtr obj, Int index, Value &v);
Bool SetElement(ContextPtr cx, ObjectPtr obj, Int index, Value &v);
Bool DeleteElement(ContextPtr cx, ObjectPtr obj, Int index);
Bool DeleteElement2(ContextPtr cx, ObjectPtr obj, Int index, Value &rval);
void ClearScope(ContextPtr cx, ObjectPtr obj);
IdArray *Enumerate(ContextPtr cx, ObjectPtr obj);
ObjectPtr NewPropertyIterator(ContextPtr cx, ObjectPtr obj);
Bool NextProperty(ContextPtr cx, ObjectPtr iterobj, Id &idref);
Bool CheckAccess(ContextPtr cx, ObjectPtr obj, Id id, AccessMode mode, Value &v, Uint &attrs);
CheckAccessOp *SetCheckObjectAccessCallback(RuntimePtr rt, CheckAccessOp *acb);
Bool GetReservedSlot(ContextPtr cx, ObjectPtr obj, Uint32 index, Value &v);
Bool SetReservedSlot(ContextPtr cx, ObjectPtr obj, Uint32 index, Value v);
RefCount HoldPrincipals(ContextPtr cx, Principals &principals);
RefCount DropPrincipals(ContextPtr cx, Principals &principals);
PrincipalsTranscoder *SetPrincipalsTranscoder(RuntimePtr rt, PrincipalsTranscoder *px);
ObjectPrincipalsFinder *SetObjectPrincipalsFinder(RuntimePtr rt, ObjectPrincipalsFinder *fop);
FunctionPtr NewFunction(ContextPtr cx, Native &call, Uint nargs, Uint flags, ObjectPtr parent, const Byte *name);
ObjectPtr GetFunctionObject(FunctionPtr fun);
const Byte *GetFunctionName(FunctionPtr fun);
StringPtr GetFunctionId(FunctionPtr fun);
Uint GetFunctionFlags(FunctionPtr fun);
Bool ObjectIsFunction(ContextPtr cx, ObjectPtr obj);
Bool DefineFunctions(ContextPtr cx, ObjectPtr obj, FunctionSpec fs[]);
FunctionPtr DefineFunction(ContextPtr cx, ObjectPtr obj, const Byte *name, Native &call, Uint nargs, Uint attrs);
FunctionPtr DefineUCFunction(ContextPtr cx, ObjectPtr obj, const Char *name, Size namelen, Native &call, Uint nargs, Uint attrs);
ObjectPtr CloneFunctionObject(ContextPtr cx, ObjectPtr funobj, ObjectPtr parent);
Bool BufferIsCompilableUnit(ContextPtr cx, ObjectPtr obj, const Byte *bytes, Size length);
ScriptPtr CompileScript(ContextPtr cx, ObjectPtr obj, const Byte *bytes, Size length, const Byte *filename, Uint lineno);
ScriptPtr CompileScriptForPrincipals(ContextPtr cx, ObjectPtr obj, Principals &principals, const Byte *bytes, Size length, const Byte *filename, Uint lineno);
ScriptPtr CompileUCScript(ContextPtr cx, ObjectPtr obj, const Char *chars, Size length, const Byte *filename, Uint lineno);
ScriptPtr CompileUCScriptForPrincipals(ContextPtr cx, ObjectPtr obj, Principals &principals, const Char *chars, Size length, const Byte *filename, Uint lineno);
ScriptPtr CompileFile(ContextPtr cx, ObjectPtr obj, const Byte *filename);
ScriptPtr CompileFileHandle(ContextPtr cx, ObjectPtr obj, const Byte *filename, FILE *fh);
ScriptPtr CompileFileHandleForPrincipals(ContextPtr cx, ObjectPtr obj, const Byte *filename, FILE *fh, Principals &principals);
ObjectPtr NewScriptObject(ContextPtr cx, ScriptPtr script);
ObjectPtr GetScriptObject(ScriptPtr script);
void DestroyScript(ContextPtr cx, ScriptPtr script);
FunctionPtr CompileFunction(ContextPtr cx, ObjectPtr obj, const Byte *name, Uint nargs, const Byte **argnames, const Byte *bytes, Size length, const Byte *filename, Uint lineno);
FunctionPtr CompileFunctionForPrincipals(ContextPtr cx, ObjectPtr obj, Principals &principals, const Byte *name, Uint nargs, const Byte **argnames, const Byte *bytes, Size length, const Byte *filename, Uint lineno);
FunctionPtr CompileUCFunction(ContextPtr cx, ObjectPtr obj, const Byte *name, Uint nargs, const Byte **argnames, const Char *chars, Size length, const Byte *filename, Uint lineno);
FunctionPtr CompileUCFunctionForPrincipals(ContextPtr cx, ObjectPtr obj, Principals &principals, const Byte *name, Uint nargs, const Byte **argnames, const Char *chars, Size length, const Byte *filename, Uint lineno);
StringPtr DecompileScript(ContextPtr cx, ScriptPtr script, const Byte *name, Uint indent);
StringPtr DecompileFunction(ContextPtr cx, FunctionPtr fun, Uint indent);
StringPtr DecompileFunctionBody(ContextPtr cx, FunctionPtr fun, Uint indent);
Bool ExecuteScript(ContextPtr cx, ObjectPtr obj, ScriptPtr script, Value &rval);
Bool ExecuteScriptPart(ContextPtr cx, ObjectPtr obj, ScriptPtr script, ExecPart part, Value &rval);
Bool EvaluateScript(ContextPtr cx, ObjectPtr obj, const Byte *bytes, Uint length, const Byte *filename, Uint lineno, Value &rval);
Bool EvaluateScriptForPrincipals(ContextPtr cx, ObjectPtr obj, Principals &principals, const Byte *bytes, Uint length, const Byte *filename, Uint lineno, Value &rval);
Bool EvaluateUCScript(ContextPtr cx, ObjectPtr obj, const Char *chars, Uint length, const Byte *filename, Uint lineno, Value &rval);
Bool EvaluateUCScriptForPrincipals(ContextPtr cx, ObjectPtr obj, Principals &principals, const Char *chars, Uint length, const Byte *filename, Uint lineno, Value &rval);
Bool CallFunction(ContextPtr cx, ObjectPtr obj, FunctionPtr fun, Uint argc, Value argv[], Value &rval);
Bool CallFunctionName(ContextPtr cx, ObjectPtr obj, const Byte *name, Uint argc, Value argv[], Value &rval);
Bool CallFunctionValue(ContextPtr cx, ObjectPtr obj, Value fval, Uint argc, Value argv[], Value &rval);
BranchCallback *SetBranchCallback(ContextPtr cx, BranchCallback *cb);
Bool IsRunning(ContextPtr cx);
Bool IsConstructing(ContextPtr cx);
Bool IsAssigning(ContextPtr cx);
void SetCallReturnValue2(ContextPtr cx, Value v);
StringPtr NewString(ContextPtr cx, Byte *bytes, Size length);
StringPtr NewStringCopyN(ContextPtr cx, const Byte *s, Size n);
StringPtr NewStringCopyZ(ContextPtr cx, const Byte *s);
StringPtr InternString(ContextPtr cx, const Byte *s);
StringPtr NewUCString(ContextPtr cx, Char *chars, Size length);
StringPtr NewUCStringCopyN(ContextPtr cx, const Char *s, Size n);
StringPtr NewUCStringCopyZ(ContextPtr cx, const Char *s);
StringPtr InternUCStringN(ContextPtr cx, const Char *s, Size length);
StringPtr InternUCString(ContextPtr cx, const Char *s);
Byte *GetStringBytes(StringPtr str);
Char *GetStringChars(StringPtr str);
Size GetStringLength(StringPtr str);
Int CompareStrings(StringPtr str1, StringPtr str2);
StringPtr NewGrowableString(ContextPtr cx, Char *chars, Size length);
StringPtr NewDependentString(ContextPtr cx, StringPtr str, Size start, Size length);
StringPtr ConcatStrings(ContextPtr cx, StringPtr left, StringPtr right);
const Char *UndependString(ContextPtr cx, StringPtr str);
Bool MakeStringImmutable(ContextPtr cx, StringPtr str);
void SetLocaleCallbacks(ContextPtr cx, LocaleCallbacks *callbacks[]);
LocaleCallbacks **GetLocaleCallbacks(ContextPtr cx);
void ReportError(ContextPtr cx, const Byte *format, ...);
void ReportErrorNumber(ContextPtr cx, ErrorCallback *errorCallback, void *userRef, const Uint errorNumber, ...);
void ReportErrorNumberUC(ContextPtr cx, ErrorCallback *errorCallback, void *userRef, const Uint errorNumber, ...);
Bool ReportWarning(ContextPtr cx, const Byte *format, ...);
Bool ReportErrorFlagsAndNumber(ContextPtr cx, Uint flags, ErrorCallback *errorCallback, void *userRef, const Uint errorNumber, ...);
Bool ReportErrorFlagsAndNumberUC(ContextPtr cx, Uint flags, ErrorCallback *errorCallback, void *userRef, const Uint errorNumber, ...);
void ReportOutOfMemory(ContextPtr cx);
ErrorReporter *SetErrorReporter(ContextPtr cx, ErrorReporter *er);
ObjectPtr NewRegExpObject(ContextPtr cx, Byte *bytes, Size length, Uint flags);
ObjectPtr NewUCRegExpObject(ContextPtr cx, Char *chars, Size length, Uint flags);
void SetRegExpInput(ContextPtr cx, StringPtr input, Bool multiline);
void ClearRegExpStatics(ContextPtr cx);
void ClearRegExpRoots(ContextPtr cx);
Bool IsExceptionPending(ContextPtr cx);
Bool GetPendingException(ContextPtr cx, Value &v);
void SetPendingException(ContextPtr cx, Value v);
void ClearPendingException(ContextPtr cx);
Bool ReportPendingException(ContextPtr cx);
ExceptionState *SaveExceptionState(ContextPtr cx);
void RestoreExceptionState(ContextPtr cx, ExceptionState &state);
void DropExceptionState(ContextPtr cx, ExceptionState &state);
ErrorReport *ErrorFromException(ContextPtr cx, Value v);
Bool ThrowReportedError(ContextPtr cx, const Byte *message, ErrorReport &report);
Word GetContextThread(ContextPtr cx);
Word SetContextThread(ContextPtr cx);
Word ClearContextThread(ContextPtr cx);

jsmm_namespace_END

#endif /* jsmm_api_H */
